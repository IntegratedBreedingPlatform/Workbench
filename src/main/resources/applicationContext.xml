<?xml version="1.0" encoding="ISO-8859-1"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"

	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
						http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

	<!-- Declare property file locations -->
	<context:property-placeholder
		location="classpath:workbench.properties, classpath:database.properties" />
		
	<util:properties id="databaseProperties" location="classpath:database.properties" />	
	<util:properties id="workbenchProperties" location="classpath:workbench.properties" />
	<util:properties id="helpProperties" location="classpath:helplinks.properties" />

	<!-- Enable Spring annotations -->
	<context:annotation-config />

	<!-- Enable load-time-weaving so we can use @Configurable annotation. To 
		make this work, we need to set the -java.agent VM argument to the spring-instrument 
		JAR file's path. In windows, you can use: -javaagent:${env_var:HOMEDRIVE}${env_var:HOMEPATH}\.m2\repository\org\springframework\spring-instrument\3.1.1.RELEASE\spring-instrument-3.1.1.RELEASE.jar 
		Mac and Linux users, add your path here. -->
	<context:load-time-weaver />

	<!-- The application class. -->
	<bean id="workbenchMain" class="org.generationcp.ibpworkbench.IBPWorkbenchApplication"
		scope="prototype" />

	<bean id="workbenchContent" class="org.generationcp.ibpworkbench.WorkbenchContentApp"
		scope="prototype" />
	<!-- GPSB -->
	<bean id="application_gpsb"
		  class="org.generationcp.ibpworkbench.GermplasmStudyBrowserApplication"
		  scope="prototype" />

	<bean id="sessionData" class="org.generationcp.ibpworkbench.SessionData"
		scope="session">
		<aop:scoped-proxy />
	</bean>

	<!-- Reuseable UI components can be declared here, but don't do it just 
		so you can have auto-wiring. Add @Configurable annotation to your class if 
		you only need auto-wiring. -->

	<!-- The Message Source -->
	<bean id="messageSource"
		class="org.generationcp.commons.vaadin.spring.SimpleResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>I18NMessages</value>
				<value>VaadinCommonMessages</value>
			</list>
		</property>
		<property name="locale">
			<util:constant static-field="java.util.Locale.ENGLISH" />
		</property>
	</bean>

	<bean id="workbenchDataManager"
		class="org.generationcp.middleware.manager.WorkbenchDataManagerImpl"
		destroy-method="close">
		<constructor-arg ref="workbenchHibernateSessionProvider" />
		<property name="installationDirectory" value="${workbench.installation_dir}" />
	</bean>

	<bean id="toolUtil" class="org.generationcp.ibpworkbench.util.ToolUtil">
		<property name="jdbcHost" value="${db.host}" />
		<property name="jdbcPort" value="${db.port}" />
		<property name="centralUser" value="" />
		<property name="centralPassword" value="" />
		<property name="localUser" value="" />
		<property name="localPassword" value="" />
		<property name="workbenchDbName" value="workbench" />
		<property name="workbenchUser" value="${db.username}" />
		<property name="workbenchPassword" value="${db.password}" />
		<property name="workbenchInstallationDirectory" value="${workbench.installation_dir}" />
	</bean>

	<bean id="mysqlUtil" class="org.generationcp.commons.util.MySQLUtil">
		<property name="mysqlDriver" value="com.mysql.jdbc.Driver" />
		<property name="mysqlHost" value="${db.host}" />
		<property name="mysqlPort" value="${db.port}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="mysqlDumpPath" value="${workbench.mysqlDumpPath}" />
		<property name="mysqlPath" value="${workbench.mysqlExePath}" />
	</bean>

	<bean id="tomcatUtil" class="org.generationcp.commons.tomcat.util.TomcatUtil">
		<property name="managerUrl" value="${tomcat.manager.url}" />
		<property name="username" value="${tomcat.manager.username}" />
		<property name="password" value="${tomcat.manager.password}" />
	</bean>

	<bean id="programService" class="org.generationcp.ibpworkbench.service.ProgramService"></bean>
	<bean id="appLauncherService"
		class="org.generationcp.ibpworkbench.service.AppLauncherService"></bean>

	<bean id="springAppContextProvider" class="org.generationcp.commons.util.SpringAppContextProvider"></bean>

	<bean id="contextUtil" class="org.generationcp.commons.spring.util.ContextUtil"
		scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="toolLicenseUtil" class="org.generationcp.commons.spring.util.ToolLicenseUtil" factory-method="getInstance">
	</bean>

	<bean id="cloner" class="com.rits.cloning.Cloner" />

	<bean id="studyDataManager" factory-bean="managerFactory"
		factory-method="getStudyDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="germplasmListManager" factory-bean="managerFactory"
		factory-method="getGermplasmListManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="userDataManager" factory-bean="managerFactory"
		factory-method="getUserDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="germplasmDataManager" factory-bean="managerFactory"
		factory-method="getGermplasmDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="locationDataManager" factory-bean="managerFactory"
		factory-method="getLocationDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="userProgramStateManager" factory-bean="managerFactory"
		factory-method="getUserProgramStateDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="ontologyDataManager" factory-bean="managerFactory"
		factory-method="getOntologyDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="ontologyVariableDataManager" factory-bean="managerFactory"
		factory-method="getOntologyVariableDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="propertyDataManager" factory-bean="managerFactory"
		factory-method="getOntologyPropertyDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="termDataManager" factory-bean="managerFactory"
		  factory-method="getTermDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="scaleDataManager" factory-bean="managerFactory"
		factory-method="getOntologyScaleDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="methodDataManager" factory-bean="managerFactory"
		factory-method="getOntologyMethodDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="ontologyDaoFactory" factory-bean="managerFactory"
		factory-method="getOntologyDaoFactory" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="standardVariableTransformer" factory-bean="managerFactory"
		factory-method="getStandardVariableTransformer" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="ontologyService" factory-bean="managerFactory"
		factory-method="getOntologyService" scope="request">
		<aop:scoped-proxy />
	</bean>

	<!--From GPSB-->
	<bean id="genotypicDataManager" factory-bean="managerFactory"
		  factory-method="getGenotypicDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="pedigreeDataManager" factory-bean="managerFactory"
		  factory-method="getPedigreeDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="inventoryDataManager" factory-bean="managerFactory"
		  factory-method="getInventoryDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="crossStudyDataManager" factory-bean="managerFactory"
		  factory-method="getCrossStudyDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="ontologyVariableManager" factory-bean="managerFactory"
		factory-method="getOntologyVariableDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>


	<bean id="breedingViewImportService"  class="org.generationcp.commons.service.impl.BreedingViewImportServiceImpl" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="workbenchUserService" class="org.generationcp.ibpworkbench.service.WorkbenchUserService" />

	<bean id="fieldbookService" factory-bean="managerFactory" 
		factory-method="getFieldbookMiddlewareService" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="germplasmGroupingService" factory-bean="managerFactory" 
		factory-method="getGermplasmGroupingService" scope="request">
		<aop:scoped-proxy />
	</bean>

	<!-- Data Source and Transaction Configuration -->

	<tx:annotation-driven />

	<bean id="xaDataSources" class="org.generationcp.middleware.hibernate.XADataSources" />

	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close">
		<property name="forceShutdown" value="false" />
	</bean>

	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.J2eeUserTransaction">
		<property name="transactionTimeout" value="300" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager"
		depends-on="atomikosTransactionManager,atomikosUserTransaction">
		<property name="transactionManager" ref="atomikosTransactionManager" />
		<property name="userTransaction" ref="atomikosUserTransaction" />
	</bean>


	<bean id="workbenchHibernateSessionProvider"
		class="org.generationcp.middleware.hibernate.HibernateSessionPerRequestProvider">
		<property name="sessionFactory" ref="WORKBENCH_SessionFactory" />
	</bean>


	<!-- Manager Factory Provider -->
	<bean id="managerFactoryProvider"
		class="org.generationcp.commons.hibernate.DynamicManagerFactoryProviderConcurrency">
		<constructor-arg ref="workbenchDataManager" />
	</bean>

	<bean id="managerFactory" name="managerFactory" factory-bean="managerFactoryProvider"
		factory-method="createInstance" scope="request">
		<aop:scoped-proxy />
	</bean>

	<!-- Authentication -->
	<bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

	<bean id="authProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="workbenchUserDetailsService" />
		<property name="passwordEncoder" ref="encoder" />
	</bean>

	<!-- Nested <beans> elements can only be at the end. -->
	
	<!-- Only activate liquibase auto update in non-production environments. 
		Requires -Dspring.profiles.active=development in system properties to make sure auto activation works in dev environments only. -->
		
	<!-- As a best practice, for production environments (definition of which is not yet clearly defined for BMS) database update should not trigger automatically.
		 For this case, liquibase can generate a SQL script using the updateSQL commnad from the change log using a command that looks like following 
		 	(add "dash dash" before command line options):
	
			java -jar <BMS_INSTALL>/infrastructure/tomcat/webapps/ibpworkbench/WEB-INF/lib/liquibase-core-3.5.0.jar 
			  classpath=<BMS_INSTALL>/infrastructure/tomcat/webapps/ibpworkbench.war 
			  driver=com.mysql.jdbc.Driver 
			  changeLogFile=db_changelog_crop.xml 
			  url="jdbc:mysql://localhost:43306/ibdbv2_maize_merged" 
			  username=root 
			  password= 
			  updateSQL 
		
		TODO: This needs to be scripted for dynamically detecting crop datbases to run against.	
		
		Script generated as such will have to be runn manually against each production database by administrators/data managers.
	 -->
	<beans profile="development">
		<bean id="liquibaseInitBean" class="org.generationcp.middleware.liquibase.LiquibaseInitBean" />
	</beans>
</beans>
