<?xml version="1.0" encoding="ISO-8859-1"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"

	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
						http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!-- Declare property file locations -->
	<context:property-placeholder
		location="classpath:workbench.properties, classpath:database.properties, classpath:crossing.properties" />
		
	<util:properties id="databaseProperties" location="classpath:database.properties" />	
	<util:properties id="workbenchProperties" location="classpath:workbench.properties" />
	<util:properties id="helpProperties" location="classpath:helplinks.properties" />

	<!-- Enable Spring annotations -->
	<context:annotation-config />

	<!-- Enable load-time-weaving so we can use @Configurable annotation. To 
		make this work, we need to set the -java.agent VM argument to the spring-instrument 
		JAR file's path. In windows, you can use: -javaagent:${env_var:HOMEDRIVE}${env_var:HOMEPATH}\.m2\repository\org\springframework\spring-instrument\3.1.1.RELEASE\spring-instrument-3.1.1.RELEASE.jar 
		Mac and Linux users, add your path here. -->
	<context:load-time-weaver />

	<!-- The application class. -->
	<bean id="workbenchMain" class="org.generationcp.ibpworkbench.IBPWorkbenchApplication"
		scope="prototype" />

	<bean id="workbenchContent" class="org.generationcp.ibpworkbench.WorkbenchContentApp"
		scope="prototype" />
	<!-- GPSB -->
	<bean id="application_gpsb"
		  class="org.generationcp.ibpworkbench.GermplasmStudyBrowserApplication"
		  scope="prototype" />
	<!-- BM -->
	<bean id="application_bm"
		  class="org.generationcp.breeding.manager.application.BreedingManagerApplication"
		  scope="prototype" />

	<!-- Reuseable UI components can be declared here, but don't do it just 
		so you can have auto-wiring. Add @Configurable annotation to your class if 
		you only need auto-wiring. -->

	<!-- The Message Source -->
	<bean id="messageSource"
		class="org.generationcp.commons.vaadin.spring.SimpleResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>I18NMessages</value>
				<value>CommonMessages</value>
			</list>
		</property>
		<property name="locale">
			<util:constant static-field="java.util.Locale.ENGLISH" />
		</property>
	</bean>

	<bean id="workbenchDataManager"
		class="org.generationcp.middleware.manager.WorkbenchDataManagerImpl"
		destroy-method="close">
		<constructor-arg ref="workbenchHibernateSessionProvider" />
	</bean>

	<bean id="permissionService"
			  class="org.generationcp.middleware.service.api.permission.PermissionServiceImpl"
			  destroy-method="close">
		<constructor-arg ref="workbenchHibernateSessionProvider" />
	</bean>

	<bean id="toolUtil" class="org.generationcp.ibpworkbench.util.ToolUtil" />

	<bean id="mysqlUtil" class="org.generationcp.commons.util.MySQLUtil">
		<property name="mysqlDriver" value="com.mysql.jdbc.Driver" />
		<property name="mysqlHost" value="${db.host}" />
		<property name="mysqlPort" value="${db.port}" />
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="mysqlDumpPath" value="${workbench.mysqlDumpPath}" />
		<property name="mysqlPath" value="${workbench.mysqlExePath}" />
	</bean>

	<bean id="tomcatUtil" class="org.generationcp.commons.tomcat.util.TomcatUtil">
		<property name="managerUrl" value="${tomcat.manager.url}" />
		<property name="username" value="${tomcat.manager.username}" />
		<property name="password" value="${tomcat.manager.password}" />
	</bean>

	<bean id="programService" class="org.generationcp.ibpworkbench.service.ProgramService"></bean>
	<bean id="appLauncherService"
		class="org.generationcp.ibpworkbench.service.AppLauncherService"></bean>

	<bean id="springAppContextProvider" class="org.generationcp.commons.util.SpringAppContextProvider"></bean>

	<bean id="contextUtil" class="org.generationcp.commons.spring.util.ContextUtil"
		scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="studyPermissionValidator" class=" org.generationcp.commons.util.StudyPermissionValidator"
		scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="cloner" class="com.rits.cloning.Cloner" />

	<bean id="validatorCounter" class="org.generationcp.ibpworkbench.validator.ValidatorCounter"
		  scope="session">
		<aop:scoped-proxy />
	</bean>

	<bean id="breedingMethodTracker" class="org.generationcp.ibpworkbench.ui.programmethods.BreedingMethodTracker"
		  scope="session">
		<aop:scoped-proxy />
	</bean>

	<bean id="webClientInfo" class="org.generationcp.ibpworkbench.common.WebClientInfo"
		  scope="session">
		<aop:scoped-proxy />
	</bean>

	<bean id="studyDataManager" factory-bean="managerFactory"
		factory-method="getStudyDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="germplasmListManager" factory-bean="managerFactory"
		factory-method="getGermplasmListManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="germplasmDataManager" factory-bean="managerFactory"
		factory-method="getGermplasmDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="locationDataManager" factory-bean="managerFactory"
		factory-method="getLocationDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="userProgramStateManager" factory-bean="managerFactory"
		factory-method="getUserProgramStateDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="ontologyDataManager" factory-bean="managerFactory"
		factory-method="getOntologyDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="ontologyVariableDataManager" factory-bean="managerFactory"
		factory-method="getOntologyVariableDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="propertyDataManager" factory-bean="managerFactory"
		factory-method="getOntologyPropertyDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="termDataManager" factory-bean="managerFactory"
		  factory-method="getTermDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="scaleDataManager" factory-bean="managerFactory"
		factory-method="getOntologyScaleDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="methodDataManager" factory-bean="managerFactory"
		factory-method="getOntologyMethodDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="daoFactory" factory-bean="managerFactory"
		factory-method="getDaoFactory" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="standardVariableTransformer" factory-bean="managerFactory"
		factory-method="getStandardVariableTransformer" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="ontologyService" factory-bean="managerFactory"
		factory-method="getOntologyService" scope="request">
		<aop:scoped-proxy />
	</bean>

	<!--From GPSB-->
	<bean id="genotypicDataManager" factory-bean="managerFactory"
		  factory-method="getGenotypicDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="pedigreeDataManager" factory-bean="managerFactory"
		  factory-method="getPedigreeDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="inventoryDataManager" factory-bean="managerFactory"
		  factory-method="getInventoryDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="crossStudyDataManager" factory-bean="managerFactory"
		  factory-method="getCrossStudyDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="ontologyVariableManager" factory-bean="managerFactory"
		factory-method="getOntologyVariableDataManager" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="sampleListService" factory-bean="managerFactory"
		  factory-method="getSampleListService" scope="request">
		<aop:scoped-proxy proxy-target-class="false" />
	</bean>

	<bean id="sampleService" factory-bean="managerFactory"
		  factory-method="getSampleService" scope="request">
		<aop:scoped-proxy proxy-target-class="false" />
	</bean>

	<bean id="formulaService" factory-bean="managerFactory"
		  factory-method="getFormulaService" scope="request">
		<aop:scoped-proxy proxy-target-class="false" />
	</bean>

	<bean id="studyService" factory-bean="managerFactory"
		  factory-method="getStudyService" scope="request">
        <aop:scoped-proxy proxy-target-class="false" />
    </bean>

	<bean id="experimentDesignService" factory-bean="managerFactory"
		  factory-method="getExperimentDesignService" scope="request">
		<aop:scoped-proxy proxy-target-class="false" />
	</bean>

	<bean id="breedingViewImportService"  class="org.generationcp.commons.service.impl.BreedingViewImportServiceImpl" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="workbenchUserService" class="org.generationcp.ibpworkbench.service.WorkbenchUserService" />

	<bean id="authorizationService" class="org.generationcp.commons.security.AuthorizationService"/>

	<bean id="fieldbookService" factory-bean="managerFactory"
		factory-method="getFieldbookMiddlewareService" scope="request">
		<aop:scoped-proxy />
	</bean>
	
	<bean id="germplasmGroupingService" factory-bean="managerFactory" 
		factory-method="getGermplasmGroupingService" scope="request">
		<aop:scoped-proxy />
	</bean>

	<!-- Data Source and Transaction Configuration -->

	<tx:annotation-driven />

	<bean id="xaDataSources" class="org.generationcp.middleware.hibernate.XADataSources" />

	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close">
		<property name="forceShutdown" value="false" />
	</bean>

	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.J2eeUserTransaction">
		<property name="transactionTimeout" value="${atomikos.transaction.timeout}" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager"
		depends-on="atomikosTransactionManager,atomikosUserTransaction">
		<property name="transactionManager" ref="atomikosTransactionManager" />
		<property name="userTransaction" ref="atomikosUserTransaction" />
	</bean>

	<bean id="userService"
		  class="org.generationcp.middleware.service.impl.user.UserServiceImpl">
        <constructor-arg ref="workbenchHibernateSessionProvider" />
    </bean>


	<bean id="workbenchHibernateSessionProvider"
		class="org.generationcp.middleware.hibernate.HibernateSessionPerRequestProvider">
		<property name="sessionFactory" ref="WORKBENCH_SessionFactory" />
	</bean>


	<!-- Manager Factory Provider -->
	<bean id="managerFactoryProvider"
		class="org.generationcp.commons.hibernate.DynamicManagerFactoryProviderConcurrency">
		<constructor-arg ref="workbenchDataManager" />
	</bean>

	<bean id="managerFactory" name="managerFactory" factory-bean="managerFactoryProvider"
		factory-method="createInstance" scope="request">
		<aop:scoped-proxy />
	</bean>

	<!-- Authentication -->
	<bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

	<bean id="authProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="workbenchUserDetailsService" />
		<property name="passwordEncoder" ref="encoder" />
	</bean>

	<bean id="trialEnvironmentBuilder" factory-bean="managerFactory"
		  factory-method="getTrialEnvironmentBuilder" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="dataSetBuilder" factory-bean="managerFactory"
		  factory-method="getDataSetBuilder" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="stockBuilder" factory-bean="managerFactory"
		  factory-method="getStockBuilder" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="workbookBuilder" factory-bean="managerFactory"
		  factory-method="getWorkbookBuilder" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="workbookSaver" factory-bean="managerFactory"
		  factory-method="getWorkbookSaver" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="listDataProjectSaver" factory-bean="managerFactory"
          factory-method="getListDataProjectSaver" scope="request">
        <aop:scoped-proxy />
    </bean>

	<bean id="pedigreeService" factory-bean="managerFactory"
		  factory-method="getPedigreeService" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="crossExpansionProperties"
		  class="org.generationcp.middleware.util.CrossExpansionProperties">
		<property name="defaultLevel" value="${default.generation.level}" />
		<property name="profile" value="${pedigree.profile}" />
		<property name="hybridBreedingMethods" value="#{'${hybrid.breeding.methods}'.split(',')}" />
	</bean>

	<bean id="userTreeStateService" class="org.generationcp.commons.service.impl.UserTreeStateServiceImpl"/>

	<bean id="keySequenceRegisterService" factory-bean="managerFactory"
		  factory-method="getKeySequenceRegisterService" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="breedingManagerService" class="org.generationcp.breeding.manager.service.BreedingManagerServiceImpl" />

	<bean id="breedingManagerWindowGenerator" class="org.generationcp.breeding.manager.application.BreedingManagerWindowGenerator" />

	<!-- Required bean declarations for Germplasm Coding Service -->

	<bean class="org.generationcp.commons.ruleengine.RulesPostProcessor">
		<property name="ruleFactory" ref="ruleFactory" />
	</bean>

	<bean id="ruleFactory" class="org.generationcp.commons.ruleengine.RuleFactory"
		  init-method="init" />

	<bean class="org.generationcp.commons.ruleengine.RulesPostProcessor">
		<property name="ruleFactory" ref="processCodeRuleFactory" />
	</bean>

	<bean id="processCodeRuleFactory" class="org.generationcp.commons.ruleengine.ProcessCodeRuleFactory"
		  init-method="init" />

	<bean id="ruleConfigProvider"
		  class="org.generationcp.commons.ruleengine.provider.PropertyFileRuleConfigurationProvider">
		<property name="ruleSequenceConfiguration">
			<map>
				<entry key="stockid" value="${stockid.rules}" />
				<entry key="coding" value="Prefix,Count,Suffix" />
			</map>
		</property>
	</bean>

	<bean id="jasperReportService" class="org.generationcp.commons.reports.service.impl.JasperReportServiceImpl"
		  scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="reportService" factory-bean="managerFactory"
		  factory-method="getReportService" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="germplasmListExporter" class="org.generationcp.breeding.manager.listmanager.util.GermplasmListExporter"/>
	<bean id="fileDownloadUtility" class="org.generationcp.breeding.manager.util.FileDownloaderUtility"/>
	<bean id="germplasmExportService" class="org.generationcp.commons.service.impl.GermplasmExportServiceImpl" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="germplasmExportedWorkbook" class="org.generationcp.commons.parsing.GermplasmExportedWorkbook" scope="request">
		<aop:scoped-proxy />
	</bean>
	<bean id="fileService" class="org.generationcp.commons.service.impl.FileServiceImpl"
		  init-method="init">
	</bean>

	<!-- Singleton bean as there is nothing request specific in here. -->
	<bean id="germplasmNamingProperties" class="org.generationcp.commons.service.GermplasmNamingProperties">
		<property name="germplasmOriginStudiesDefault" value="${germplasm.origin.studies.default}"/>
		<property name="germplasmOriginStudiesWheat" value="${germplasm.origin.studies.wheat}"/>
		<property name="germplasmOriginStudiesMaize" value="${germplasm.origin.studies.maize}"/>
	</bean>

	<bean id="seedSourceGenerator" class="org.generationcp.commons.ruleengine.generator.SeedSourceGenerator">
	</bean>



	<context:component-scan base-package="org.generationcp.breeding.manager.validator"/>
	<!-- Including all beans used for generating Code Sheet when exporting Germplasm List excel file -->
	<context:component-scan base-package="org.generationcp.commons.workbook.generator" />

	<bean id="germplasmNamingService" class="org.generationcp.commons.service.impl.GermplasmNamingServiceImpl" />

	<bean id="ruleService"
		  class="org.generationcp.commons.ruleengine.impl.RulesServiceImpl" />

	<!-- This component scan automatically registers all implementations of
		the Rule interface into the Spring context. In conjunction with the RulesPostProcessor
		above, this automatically populates the map in the RuleFactory -->
	<context:component-scan base-package="org.generationcp.commons.ruleengine.stockid" />
	<context:component-scan base-package="org.generationcp.commons.ruleengine.cross" />
	<context:component-scan base-package="org.generationcp.commons.ruleengine.coding" />
	<context:component-scan base-package="org.generationcp.commons.ruleengine.coding.expression" />

	<bean id="germplasmCodeGenerationService" class="org.generationcp.commons.service.impl.GermplasmCodeGenerationServiceImpl" />

	<bean id="codingExpressionResolver" class="org.generationcp.commons.ruleengine.coding.expression.CodingExpressionResolver" />

	<bean id="codingExpressionFactory"
		  class="org.generationcp.commons.ruleengine.coding.expression.CodingExpressionFactory"
		  init-method="init" />

	<bean class="org.generationcp.commons.ruleengine.coding.expression.CodingExpressionPostProcessor">
		<property name="codingExpressionFactory" ref="codingExpressionFactory" />
	</bean>

	<bean id="datasetService" factory-bean="managerFactory"
		  factory-method="getDatasetMiddlewareService" scope="request">
		<aop:scoped-proxy proxy-target-class="false" />
	</bean>

	<bean id="studyGermplasmService" factory-bean="managerFactory"
		  factory-method="getStudyGermplasmService" scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="derivedVariableService" factory-bean="managerFactory"
		  factory-method="getDerivedVariableService" scope="request">
		<aop:scoped-proxy proxy-target-class="false" />
	</bean>

	<bean id="stockIDValidator" class="org.generationcp.breeding.manager.listimport.validator.StockIDValidator"
		scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="stockService" class="org.generationcp.commons.service.impl.StockServiceImpl"
		  scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="inventoryService" factory-bean="managerFactory" factory-method="getInventoryService"
		  scope="request">
		<aop:scoped-proxy />
	</bean>

	<bean id="searchRequestService" factory-bean="managerFactory" factory-method="getSearchRequestService"
		  scope="request">
		<aop:scoped-proxy />
	</bean>

	<!-- Nested <beans> elements can only be at the end. -->
	
</beans>
