<?xml version="1.0" encoding="UTF-8"?>
<bean:beans xmlns:bean="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/security 
		http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<http pattern="/controller/static/**" security="none" />
	<http pattern="/controller/pages/angular2/lib/**" security="none" />
	<http pattern="/VAADIN/themes/**" security="none" />

	<http auto-config="true" use-expressions="true">
		<intercept-url pattern="/controller/auth/**" access="permitAll" />
		<intercept-url pattern="/web_login_forward*" access="permitAll" />
		<intercept-url pattern="/controller/ontology*" access="hasRole('ROLE_ADMIN')"/>
		<intercept-url pattern="/controller/ontology/**" access="hasRole('ROLE_ADMIN')"/>
		<intercept-url pattern="/controller/admin/*" access="hasRole('ROLE_ADMIN')"/>
		<intercept-url pattern="/controller/admin/**" access="hasRole('ROLE_ADMIN')"/>
		<intercept-url pattern="/**" access="isAuthenticated()" />
		
		<access-denied-handler error-page="/controller/accessDenied"/>

		<form-login login-page="/controller/auth/login"
            login-processing-url="/login"
            username-parameter="username"
            password-parameter="password"
			authentication-failure-url="/controller/auth/login?error"
            authentication-success-handler-ref="workbenchAuthenticationSuccessHandler" />

        <logout logout-url="/logout" delete-cookies="loggedInUserId,selectedProjectId,authToken" logout-success-url="/controller/auth/login?logout" invalidate-session="true" />

		<!-- For now, this uses Simple Hash Based Token Approach as the Persistent based approach
			requires change in DB schema to add a DB table that stores the tokens generated by
			Remember me authentication provider, also we can move the secret key somewhere else.
		-->
		<remember-me
				authentication-success-handler-ref="workbenchAuthenticationSuccessHandler"
				services-ref="rememberMeServices" />
	</http>

	<bean:bean id="rememberMeServices" class=
			"org.springframework.security.web.authentication.rememberme.TokenBasedRememberMeServices">
		<bean:constructor-arg value="bmsWorkbenchSecretKey"/>
		<bean:constructor-arg ref="workbenchUserDetailsService"/>
		<bean:property name="tokenValiditySeconds" value="864000" />
		<bean:property name="parameter" value="remember-me" />
		<bean:property name="cookieName" value="BMS_TOK" />
	</bean:bean>


	<bean:bean id="rememberMeAuthenticationProvider" class="org.springframework.security.authentication.RememberMeAuthenticationProvider" >
		<bean:constructor-arg value="bmsWorkbenchSecretKey"/>
	</bean:bean>

	<bean:bean id="workbenchUserDetailsService" class="org.generationcp.commons.security.WorkbenchUserDetailsService">
		<bean:property name="workbenchDataManager" ref="workbenchDataManager" />
	</bean:bean>

	<bean:bean id="workbenchAuthenticationSuccessHandler" class="org.generationcp.ibpworkbench.security.WorkbenchAuthenticationSuccessHandler" />

	<authentication-manager>
		<authentication-provider ref="rememberMeAuthenticationProvider"/>
		<authentication-provider user-service-ref="workbenchUserDetailsService">
			<password-encoder hash="bcrypt" />
		</authentication-provider>
	</authentication-manager>

	<!-- Must use AspectJ mode for using method level security annotations on Vaadin component beans. -->
	<global-method-security pre-post-annotations="enabled" mode="aspectj" proxy-target-class="true"/>

</bean:beans>
